import Foundation
import SwiftUI
import FirebaseFirestore

/// Represents a delivery order in the courier system
/// Contains all information needed to track an order from creation to delivery
struct Order: Codable, Identifiable {
    /// Unique identifier for the order (auto-generated by Firebase)
    @DocumentID var id: String?
    
    /// ID of the customer who created this order
    var userId: String
    
    /// ID of the driver assigned to this order (nil if unassigned)
    var driverId: String? = nil
    
    /// Pickup address for the package
    let pickup: String
    
    /// Delivery address for the package
    let dropoff: String
    
    /// Size category of the package (e.g., "Small", "Medium", "Large")
    let size: String
    
    /// Weight of the package in pounds
    let weight: String
    
    /// Whether the package is fragile and requires special handling
    let fragile: Bool
    
    /// Delivery speed preference (e.g., "Standard", "Express")
    let speed: String
    
    /// Special delivery instructions from the customer
    let instructions: String?
    
    /// Total cost of the delivery
    let cost: Double
    
    /// Distance between pickup and dropoff in miles
    let distance: Double
    
    /// Estimated time of arrival in minutes
    let etaMinutes: Int
    
    /// Timestamp when the order was created
    let createdAt: Date
    
    /// Current status of the order
    var status: OrderStatus
    
    /// Timestamp when a driver was assigned to this order
    var assignedAt: Date? = nil
    
    /// Timestamp when the driver picked up the package
    var pickedUpAt: Date? = nil
    
    /// Timestamp when the package was delivered
    var deliveredAt: Date? = nil
    
    /// URL of the delivery confirmation photo
    var deliveryPhotoURL: String? = nil
    
    /// Additional notes from the driver about the delivery
    var deliveryNotes: String? = nil

    /// Creates a new order with the specified parameters
    /// - Parameters:
    ///   - id: Optional unique identifier (auto-generated if nil)
    ///   - userId: ID of the customer creating the order
    ///   - driverId: Optional ID of assigned driver
    ///   - pickup: Pickup address
    ///   - dropoff: Delivery address
    ///   - size: Package size category
    ///   - weight: Package weight in pounds
    ///   - fragile: Whether package requires special handling
    ///   - speed: Delivery speed preference
    ///   - instructions: Optional special delivery instructions
    ///   - cost: Total delivery cost
    ///   - distance: Distance between pickup and dropoff in miles
    ///   - etaMinutes: Estimated delivery time in minutes
    ///   - status: Initial order status (defaults to .pending)
    init(
        id: String? = nil,
        userId: String,
        driverId: String? = nil,
        pickup: String,
        dropoff: String,
        size: String,
        weight: String,
        fragile: Bool,
        speed: String,
        instructions: String? = nil,
        cost: Double,
        distance: Double,
        etaMinutes: Int,
        status: OrderStatus = .pending
    ) {
        self.id = id
        self.userId = userId
        self.driverId = driverId
        self.pickup = pickup
        self.dropoff = dropoff
        self.size = size
        self.weight = weight
        self.fragile = fragile
        self.speed = speed
        self.instructions = instructions
        self.cost = cost
        self.distance = distance
        self.etaMinutes = etaMinutes
        self.createdAt = Date()
        self.status = status
    }
}

/// Represents the current status of an order in the delivery lifecycle
/// Each status corresponds to a specific stage in the order fulfillment process
enum OrderStatus: String, Codable, CaseIterable {
    /// Order has been created and is waiting for a driver to accept it
    case pending = "pending"
    
    /// A driver has accepted the order and is on their way to pickup
    case assigned = "assigned"
    
    /// Driver has picked up the package from the customer
    case pickedUp = "picked_up"
    
    /// Driver is currently delivering the package to the destination
    case inTransit = "in_transit"
    
    /// Package has been successfully delivered to the customer
    case delivered = "delivered"
    
    /// Order has been cancelled by customer or admin
    case cancelled = "cancelled"
    
    /// Human-readable display name for the status
    /// Used in UI to show status to users
    var displayName: String {
        switch self {
        case .pending: return "Pending"
        case .assigned: return "Assigned"
        case .pickedUp: return "Picked Up"
        case .inTransit: return "In Transit"
        case .delivered: return "Delivered"
        case .cancelled: return "Cancelled"
        }
    }
    
    /// Color associated with each status for UI display
    /// Provides visual indication of order progress
    var color: Color {
        switch self {
        case .pending: return .orange      // Waiting - attention needed
        case .assigned: return .blue       // In progress - active
        case .pickedUp: return .purple     // En route - moving
        case .inTransit: return .green     // Almost there - positive
        case .delivered: return .gray      // Complete - neutral
        case .cancelled: return .red       // Failed - negative
        }
    }
}
