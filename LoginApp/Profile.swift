//
//  Profile.swift
//  LoginApp
//
//  Created by Jatin Gupta on 2025-09-12.
//


import Foundation
import FirebaseFirestore

/// Represents a user's profile information and preferences
/// Contains personal details, addresses, and app settings
/// Used for storing extended user information beyond basic authentication
struct Profile: Codable, Equatable {
    /// Unique identifier for the profile (auto-generated by Firebase)
    @DocumentID var id: String?
    
    /// User's full name
    var fullName: String = ""
    
    /// User's email address
    var email: String = ""
    
    /// User's phone number
    var phone: String = ""
    
    /// User's home address for quick order creation
    var homeAddress: String = ""
    
    /// User's work address for quick order creation
    var workAddress: String = ""
    
    /// Whether push notifications are enabled
    var notificationsEnabled: Bool = true
    
    /// Timestamp when the profile was created
    var createdAt: Date = Date()
    
    /// Timestamp when the profile was last updated
    var updatedAt: Date = Date()
}

/// Manages user profile data and persistence
/// Handles loading, saving, and updating profile information
/// Uses UserDefaults for local storage (can be extended to use Firebase)
final class ProfileStore: ObservableObject {
    /// Current user profile data
    @Published var profile: Profile {
        didSet { save() }
    }

    /// Storage key for UserDefaults
    private static let key = "profile_v1"

    /// Initializes the profile store and loads existing data
    init() {
        self.profile = Self.load()
    }

    /// Saves the current profile to local storage
    private func save() {
        if let data = try? JSONEncoder().encode(profile) {
            UserDefaults.standard.set(data, forKey: Self.key)
        }
    }

    /// Loads profile data from local storage
    /// - Returns: Loaded profile or default empty profile if none exists
    private static func load() -> Profile {
        guard let data = UserDefaults.standard.data(forKey: key),
              let profile = try? JSONDecoder().decode(Profile.self, from: data) else {
            return Profile()
        }
        return profile
    }
}
